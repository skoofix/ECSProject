//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherSpellId;

    public static Entitas.IMatcher<GameEntity> SpellId {
        get {
            if (_matcherSpellId == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.SpellId);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherSpellId = matcher;
            }

            return _matcherSpellId;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Gameplay.Features.Spells.SpellId spellId { get { return (Code.Gameplay.Features.Spells.SpellId)GetComponent(GameComponentsLookup.SpellId); } }
    public Code.Gameplay.Features.Spells.SpellTypeId SpellId { get { return spellId.Value; } }
    public bool hasSpellId { get { return HasComponent(GameComponentsLookup.SpellId); } }

    public GameEntity AddSpellId(Code.Gameplay.Features.Spells.SpellTypeId newValue) {
        var index = GameComponentsLookup.SpellId;
        var component = (Code.Gameplay.Features.Spells.SpellId)CreateComponent(index, typeof(Code.Gameplay.Features.Spells.SpellId));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceSpellId(Code.Gameplay.Features.Spells.SpellTypeId newValue) {
        var index = GameComponentsLookup.SpellId;
        var component = (Code.Gameplay.Features.Spells.SpellId)CreateComponent(index, typeof(Code.Gameplay.Features.Spells.SpellId));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveSpellId() {
        RemoveComponent(GameComponentsLookup.SpellId);
        return this;
    }
}
